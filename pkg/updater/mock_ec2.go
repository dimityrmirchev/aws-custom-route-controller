// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/aws-custom-route-controller/pkg/updater (interfaces: EC2Routes)

// Package updater is a generated GoMock package.
package updater

import (
	context "context"
	reflect "reflect"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// MockEC2Routes is a mock of EC2Routes interface.
type MockEC2Routes struct {
	ctrl     *gomock.Controller
	recorder *MockEC2RoutesMockRecorder
}

// MockEC2RoutesMockRecorder is the mock recorder for MockEC2Routes.
type MockEC2RoutesMockRecorder struct {
	mock *MockEC2Routes
}

// NewMockEC2Routes creates a new mock instance.
func NewMockEC2Routes(ctrl *gomock.Controller) *MockEC2Routes {
	mock := &MockEC2Routes{ctrl: ctrl}
	mock.recorder = &MockEC2RoutesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2Routes) EXPECT() *MockEC2RoutesMockRecorder {
	return m.recorder
}

// CreateRoute mocks base method.
func (m *MockEC2Routes) CreateRoute(arg0 context.Context, arg1 *ec2.CreateRouteInput, arg2 ...func(*ec2.Options)) (*ec2.CreateRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoute", varargs...)
	ret0, _ := ret[0].(*ec2.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockEC2RoutesMockRecorder) CreateRoute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockEC2Routes)(nil).CreateRoute), varargs...)
}

// DeleteRoute mocks base method.
func (m *MockEC2Routes) DeleteRoute(arg0 context.Context, arg1 *ec2.DeleteRouteInput, arg2 ...func(*ec2.Options)) (*ec2.DeleteRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoute", varargs...)
	ret0, _ := ret[0].(*ec2.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockEC2RoutesMockRecorder) DeleteRoute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockEC2Routes)(nil).DeleteRoute), varargs...)
}

// DescribeRouteTables mocks base method.
func (m *MockEC2Routes) DescribeRouteTables(arg0 context.Context, arg1 *ec2.DescribeRouteTablesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRouteTables", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeRouteTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRouteTables indicates an expected call of DescribeRouteTables.
func (mr *MockEC2RoutesMockRecorder) DescribeRouteTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteTables", reflect.TypeOf((*MockEC2Routes)(nil).DescribeRouteTables), varargs...)
}
